package Princeton;
public class unionfind{
private int id[];
public int size[];
public unionfind(int N)
{
id=new int[N];
size=new int[N];
for(int i=0;i<N;i++)
{
id[i]=i;
size[i]=1;//initially size of each node is assumed 1 we can also assume it as "0"
}}

private int root(int i)
{
while(i!=id[i])
i=id[i];
return i;
}
public boolean connected(int p,int q)
{
return root(p)==root(q);
}

public void weighted_union(int p,int q)
{
int i=root(p);
int j=root(q);
if(size[i]<=size[j])
{
id[i]=j;//making j as the root of i
size[j]+=size[i];
}
else
{
id[j]=i;
size[i]+=size[j];
}
}
public void display(int n)
{System.out.println("\nKeys");
for(int i=0;i<n;i++)
System.out.print(id[i]+" ");
System.out.println("\nSize of each key");
for(int i=0;i<n;i++)
System.out.print(size[i]+" ");

}
public static void main(String args[])
{

	//make sure that u have given the inputs as your order
System.out.println("\nWeighted quick union");
unionfind v=new unionfind(10);
v.weighted_union(3,4);
v.weighted_union(8,4);
v.weighted_union(9,4);
v.weighted_union(5,6);
v.weighted_union(0,6);
v.weighted_union(7,2);
v.weighted_union(1,2);
v.weighted_union(2,6);
v.weighted_union(4,6);
v.display(10);
System.out.println(v.connected(9,7));
}
}
	/*
	We can also take connect items through user input
	int n = StdIn.readInt();
        WeightedQuickUnionUF uf = new WeightedQuickUnionUF(n);
        while (!StdIn.isEmpty()) {
            int p = StdIn.readInt();
            int q = StdIn.readInt();
            if (uf.find(p) == uf.find(q)) continue;
            uf.union(p, q);
            StdOut.println(p + " " + q);
        }
	*/


